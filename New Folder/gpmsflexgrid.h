#if !defined(AFX_GPMSFLEXGRID_H__D60696B4_F2D6_4187_8744_18E583F987DE__INCLUDED_)
#define AFX_GPMSFLEXGRID_H__D60696B4_F2D6_4187_8744_18E583F987DE__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

//#include "GP_HotKey.h"
//#include "GPUnit.h"


// Dispatch interfaces referenced by this interface
class GPCOleFont;
class GPCPicture;
class GPCRowCursor;
#include "MSFlexGridSink.h"

/////////////////////////////////////////////////////////////////////////////
// GPCMSFlexGrid wrapper class

typedef struct _FGFINDITEM
{
	int iStartRow;
	int iStartCol;
	int iEndRow;
	int iEndCol;
	int iCurentRow;
	int iCurentCol;
	CString csFindWhat;
	CString csReplace;
	BOOL bReplace;
	BOOL bReplaceFull;
	BOOL bbyRow;
	BOOL bForward;
	BOOL bExactly;
} FGFINDITEM, *PFGFINDITEM;

typedef struct _FGITEMDATA
{
	int iValue;
	CString csValue;
	CTime cdValue;
	UINT EditorId;
} FGITEMDATA, *PFGITEMDATA;


class GPCMSFlexGrid : public CWnd
{
	friend class GPUnit;
	friend LRESULT APIENTRY FlexSubclassProc(HWND hwnd,UINT uMsg,WPARAM wParam,LPARAM lParam) ;

public:
	DWORD HighlightDropTarget(PGPDRAGDROPSTRUCT pDrDrStruct, CPoint point);
	const static UINT uNMethods;
	const static char *cArrMethods[];
	const static char *cArrMethodsParams[];
	BOOL AutoUpdate;
	int nFilterArrayCount;
	int SortColumnNumber;
	BOOL DESCENDSort;


//protected:
//	DECLARE_DYNCREATE(GPCMSFlexGrid)
public:
	GPCMSFlexGrid(UINT iUnitId);
	GPCMSFlexGrid();

// Implementation
public:
	void ClearAllData();
	void SetSelByEdit(UINT flg=0);
	UINT DoMethod(const char *iStr, char *oStr);
	UINT GPSetProperty(char *iStr);
	virtual ~GPCMSFlexGrid();

	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x6262d3a0, 0x531b, 0x11cf, { 0x91, 0xf6, 0xc2, 0x86, 0x3c, 0x38, 0x5e, 0x30 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,LPCTSTR lpszWindowName, DWORD dwStyle,const RECT& rect,
						CWnd* pParentWnd, UINT nID,	CCreateContext* pContext = NULL)
	{
		BOOL ret=CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
		if (ret) ConnectSink();
		return ret;
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,	const RECT& rect, CWnd* pParentWnd, UINT nID,
				CFile* pPersist = NULL, BOOL bStorage = FALSE,	BSTR bstrLicKey = NULL)
	{
		BOOL ret=CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,	pPersist, bStorage, bstrLicKey);
		if (ret) ConnectSink();
		return ret;
	}

// Attributes
public:

// Operations
public:
	void OnGPKillFocus(CWnd* pNewWnd);
	void OnGPRButtonDown(UINT nFlags, CPoint point);
	void TranslateText(long iDestRow, long iDestCol, const char *pos);
	long GetRows();
	void SetRows(long nNewValue);
	long GetCols();
	void SetCols(long nNewValue);
	long GetFixedRows();
	void SetFixedRows(long nNewValue);
	long GetFixedCols();
	void SetFixedCols(long nNewValue);
	short GetVersion();
	CString GetFormatString();
	void SetFormatString(LPCTSTR lpszNewValue);
	long GetTopRow();
	void SetTopRow(long nNewValue);
	long GetLeftCol();
	void SetLeftCol(long nNewValue);
	long GetRow();
	void SetRow(long nNewValue);
	long GetCol();
	void SetCol(long nNewValue);
	long GetRowSel();
	void SetRowSel(long nNewValue);
	long GetColSel();
	void SetColSel(long nNewValue);
	CString GetText();
	void SetText(LPCTSTR lpszNewValue);
	unsigned long GetBackColor();
	void SetBackColor(unsigned long newValue);
	unsigned long GetForeColor();
	void SetForeColor(unsigned long newValue);
	unsigned long GetBackColorFixed();
	void SetBackColorFixed(unsigned long newValue);
	unsigned long GetForeColorFixed();
	void SetForeColorFixed(unsigned long newValue);
	unsigned long GetBackColorSel();
	void SetBackColorSel(unsigned long newValue);
	unsigned long GetForeColorSel();
	void SetForeColorSel(unsigned long newValue);
	unsigned long GetBackColorBkg();
	void SetBackColorBkg(unsigned long newValue);
	BOOL GetWordWrap();
	void SetWordWrap(BOOL bNewValue);
	GPCOleFont GetFont();
	void SetRefFont(LPDISPATCH newValue);
	float GetFontWidth();
	void SetFontWidth(float newValue);
	CString GetCellFontName();
	void SetCellFontName(LPCTSTR lpszNewValue);
	float GetCellFontSize();
	void SetCellFontSize(float newValue);
	BOOL GetCellFontBold();
	void SetCellFontBold(BOOL bNewValue);
	BOOL GetCellFontItalic();
	void SetCellFontItalic(BOOL bNewValue);
	BOOL GetCellFontUnderline();
	void SetCellFontUnderline(BOOL bNewValue);
	BOOL GetCellFontStrikeThrough();
	void SetCellFontStrikeThrough(BOOL bNewValue);
	float GetCellFontWidth();
	void SetCellFontWidth(float newValue);
	long GetTextStyle();
	void SetTextStyle(long nNewValue);
	long GetTextStyleFixed();
	void SetTextStyleFixed(long nNewValue);
	BOOL GetScrollTrack();
	void SetScrollTrack(BOOL bNewValue);
	long GetFocusRect();
	void SetFocusRect(long nNewValue);
	long GetHighLight();
	void SetHighLight(long nNewValue);
	BOOL GetRedraw();
	void SetRedraw(BOOL bNewValue);
	long GetScrollBars();
	void SetScrollBars(long nNewValue);
	long GetMouseRow();
	long GetMouseCol();
	long GetCellLeft();
	long GetCellTop();
	long GetCellWidth();
	long GetCellHeight();
	long GetRowHeightMin();
	void SetRowHeightMin(long nNewValue);
	long GetFillStyle();
	void SetFillStyle(long nNewValue);
	long GetGridLines();
	void SetGridLines(long nNewValue);
	long GetGridLinesFixed();
	void SetGridLinesFixed(long nNewValue);
	unsigned long GetGridColor();
	void SetGridColor(unsigned long newValue);
	unsigned long GetGridColorFixed();
	void SetGridColorFixed(unsigned long newValue);
	unsigned long GetCellBackColor();
	void SetCellBackColor(unsigned long newValue);
	unsigned long GetCellForeColor();
	void SetCellForeColor(unsigned long newValue);
	short GetCellAlignment();
	void SetCellAlignment(short nNewValue);
	long GetCellTextStyle();
	void SetCellTextStyle(long nNewValue);
	short GetCellPictureAlignment();
	void SetCellPictureAlignment(short nNewValue);
	CString GetClip();
	void SetClip(LPCTSTR lpszNewValue);
	void SetSort(short nNewValue);
	long GetSelectionMode();
	void SetSelectionMode(long nNewValue);
	long GetMergeCells();
	void SetMergeCells(long nNewValue);
	BOOL GetAllowBigSelection();
	void SetAllowBigSelection(BOOL bNewValue);
	long GetAllowUserResizing();
	void SetAllowUserResizing(long nNewValue);
	long GetBorderStyle();
	void SetBorderStyle(long nNewValue);
	long GetHWnd();
	BOOL GetEnabled();
	void SetEnabled(BOOL bNewValue);
	long GetAppearance();
	void SetAppearance(long nNewValue);
	long GetMousePointer();
	void SetMousePointer(long nNewValue);
	GPCPicture GetMouseIcon();
	void SetRefMouseIcon(LPDISPATCH newValue);
	long GetPictureType();
	void SetPictureType(long nNewValue);
	GPCPicture GetPicture();
	GPCPicture GetCellPicture();
	void SetRefCellPicture(LPDISPATCH newValue);
	CString GetTextArray(long index);
	void SetTextArray(long index, LPCTSTR lpszNewValue);
	short GetColAlignment(long index);
	void SetColAlignment(long index, short nNewValue);
	long GetColWidth(long index);
	void SetColWidth(long index, long nNewValue);
	long GetRowHeight(long index);
	void SetRowHeight(long index, long nNewValue);
	BOOL GetMergeRow(long index);
	void SetMergeRow(long index, BOOL bNewValue);
	BOOL GetMergeCol(long index);
	void SetMergeCol(long index, BOOL bNewValue);
	void SetRowPosition(long index, long nNewValue);
	void SetColPosition(long index, long nNewValue);
	long GetRowData(long index);
	void SetRowData(long index, long nNewValue);
	long GetColData(long index);
	void SetColData(long index, long nNewValue);
	CString GetTextMatrix(long Row, long Col);
	void SetTextMatrix(long Row, long Col, LPCTSTR lpszNewValue);
	void AddItem(LPCTSTR Item, const VARIANT& index);
	void RemoveItem(long index);
	void Clear();
	void Refresh();
	GPCRowCursor GetDataSource();
	void SetDataSource(LPDISPATCH newValue);
	BOOL GetRowIsVisible(long index);
	BOOL GetColIsVisible(long index);
	long GetRowPos(long index);
	long GetColPos(long index);
	short GetGridLineWidth();
	void SetGridLineWidth(short nNewValue);
	short GetFixedAlignment(long index);
	void SetFixedAlignment(long index, short nNewValue);
	BOOL GetRightToLeft();
	void SetRightToLeft(BOOL bNewValue);
	long GetOLEDropMode();
	void SetOLEDropMode(long nNewValue);
	void OLEDrag();
	/// Fired Events
	void OnClickMsflexgrid();
	void OnKeyDownMsflexgrid(short FAR* KeyCode, short Shift);
	void OnDblClickMsflexgrid();
	void OnKeyPressMsflexgrid(short FAR* KeyAscii);
	void OnKeyUpMsflexgrid(short FAR* KeyCode, short Shift);
	void OnMouseDownMsflexgrid(short Button, short Shift, long x, long y);
	void OnMouseMoveMsflexgrid(short Button, short Shift, long x, long y);
	void OnMouseUpMsflexgrid(short Button, short Shift, long x, long y);
	void OnSelChangeMsflexgrid();
	void OnRowColChangeMsflexgrid();
	void OnEnterCellMsflexgrid();
	void OnLeaveCellMsflexgrid();
	void OnScrollMsflexgrid();
	void OnCompareMsflexgrid(long Row1, long Row2, short FAR* Cmp);
	void OnOLEStartDragMsflexgrid(LPDISPATCH FAR* Data, long FAR* AllowedEffects);
	void OnOLEGiveFeedbackMsflexgrid(long FAR* Effect, BOOL FAR* DefaultCursors);
	void OnOLESetDataMsflexgrid(LPDISPATCH FAR* Data, short FAR* DataFormat);
	void OnOLECompleteDragMsflexgrid(long FAR* Effect);
	void OnOLEDragOverMsflexgrid(LPDISPATCH FAR* Data, long FAR* Effect, short FAR* Button, short FAR* Shift, float FAR* x, float FAR* y, short FAR* State);
	void OnOLEDragDropMsflexgrid(LPDISPATCH FAR* Data, long FAR* Effect, short FAR* Button, short FAR* Shift, float FAR* x, float FAR* y);

public:
	int m_DOSubItem;
	int AddChar(char iChar, DWORD iFlags);
	UINT m_uLastMouseUpFlag;
	BOOL InstallFlex();
	int GetCountColPerPage();
	int GetCountRowPerPage();
	void RedrawItems(int Row1, int Row2);
	UINT GetEditorID(int nRow, int nCol);
	const CRect GetCellRect(int iRow, int iCol);
	BOOL EnsureVisible(long iRow, long iCol);
	int FindItem(FGFINDITEM & FindItemStruct);
	int FindNextItem();
	int FindReplaceAllItem(FGFINDITEM & FindItemStruct);

// Overrides
	// ClassWizard generated virtual function overrides
	//{{AFX_VIRTUAL(GPCMSFlexGrid)
	public:
	virtual BOOL PreTranslateMessage(MSG* pMsg);
	protected:
	virtual LRESULT WindowProc(UINT message, WPARAM wParam, LPARAM lParam);
	//}}AFX_VIRTUAL


protected:
	void OnDragLButtonUp(PGPDRAGDROPSTRUCT pDrDrStruct, LPPOINT point);
	void OnMouseDragMove(PGPDRAGDROPSTRUCT pDrDrStruct, LPPOINT point);
	void OnDragMouseHover();
	//{{AFX_MSG(GPCMSFlexGrid)
	afx_msg void OnSizing(UINT fwSide, LPRECT pRect);
	afx_msg LRESULT OnNcHitTest(CPoint point);
	afx_msg void OnKillFocus(CWnd* pNewWnd);
	afx_msg void OnSetFocus(CWnd* pOldWnd);
	afx_msg void OnSize(UINT nType, int cx, int cy);
	afx_msg void OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);
	afx_msg void OnVScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);
	afx_msg void OnLButtonUp(UINT nFlags, CPoint point);
	afx_msg void OnMButtonUp(UINT nFlags, CPoint point);
	afx_msg void OnRButtonUp(UINT nFlags, CPoint point);
	afx_msg HBRUSH OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor);
	//}}AFX_MSG
	DECLARE_MESSAGE_MAP()

	void GPOnSizing(UINT fwSide, LPRECT pRect);
private:
	bool SetEditRect();
	void GPCMSFlexGridINIT(UINT iUnitId);

private:
	int m_SortCol;
	int m_sortType;
	void ConnectSink();
	int iArrPosExOut[50];
	UINT DefEditor;
	BOOL MayBeChangeEdit;
	CString LastEditResult;
	UINT LastEditorID;
	UINT EditorID;
	POINT RBhti;
	POINT hti;
	POINT lasthti;
	UINT m_EditInProgr;
	GPUnit **referGPU;
	UINT UnitId;
	CMSFlexGridSink *m_Sink;
	DWORD m_dwCookie;
	IConnectionPoint* pCP;
	FGFINDITEM m_fgFindItem;
	COleDateTime Cmpd1,Cmpd2;
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_GPMSFLEXGRID_H__D60696B4_F2D6_4187_8744_18E583F987DE__INCLUDED_)
