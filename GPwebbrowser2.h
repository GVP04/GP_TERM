#if !defined(AFX_WEBBROWSER2_H__AC7F046C_6A37_4DD2_92DD_338917C60F19__INCLUDED_)
#define AFX_WEBBROWSER2_H__AC7F046C_6A37_4DD2_92DD_338917C60F19__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

//#include "GP_HotKey.h"
//#include "GPUnit.h"


// Dispatch interfaces referenced by this interface
class GPHTMLDocument;

#include "GPWebBrowser2Sink.h"

/////////////////////////////////////////////////////////////////////////////
// GPWebBrowser2 wrapper class
typedef enum
{
      RFRSH_NORMAL          = 0,
      RFRSH_IFEXPIRED       = 1,
      RFRSH_CONTINUE        = 2,
      RFRSH_COMPLETELY      = 3,
      RFRSH_NO_CACHE        = 4,
      RFRSH_RELOAD          = 5,
      RFRSH_LEVELMASK       = 0x00FF,
      RFRSH_CLEARUSERINPUT  = 0x1000,
      RFRSH_PROMPTIFOFFLINE = 0x2000,
      RFRSH_THROUGHSCRIPT   = 0x4000
} GPWB_REFRESHFLAG;



class GPWebBrowser2 : public CWnd
{
	friend class GPUnit;
	friend LRESULT APIENTRY FlexSubclassProc(HWND hwnd,UINT uMsg,WPARAM wParam,LPARAM lParam) ;

public:

	const static CString RefrLevelToString(UINT iRefrLevel);
	static UINT StringToRefrLevel(const char* iStr);
	const static UINT uNRefrLevel;
	const static char *cArrRefrLevel[];
	const static UINT uArrRefrLevel[];

	const static CString NavConstToString(UINT iRefrLevel);
	static UINT StringToNavConst(const char* iStr);
	const static UINT uNNavConst;
	const static char *cArrNavConst[];
	const static UINT uArrNavConst[];

	const static CString ReadyStateToString(UINT iRefrLevel);
	static UINT StringToReadyState(const char* iStr);
	const static UINT uNReadyState;
	const static char *cArrReadyState[];
	const static UINT uArrReadyState[];

	const static CString HStatusToString(UINT iRefrLevel);
	static UINT StringToHStatus(const char* iStr);
	const static UINT uNHStatus;
	const static char *cArrHStatus[];
	const static UINT uArrHStatus[];

	DWORD HighlightDropTarget(PGPDRAGDROPSTRUCT pDrDrStruct, CPoint point);
	const static UINT uNMethods;
	const static char *cArrMethods[];
	const static char *cArrMethodsParams[];
	BOOL AutoUpdate;
	int nFilterArrayCount;
	int SortColumnNumber;
	BOOL DESCENDSort;


//protected:
//	DECLARE_DYNCREATE(GPWebBrowser2)
public:
	GPWebBrowser2(UINT iUnitId);

// Implementation
public:
	UINT DoMethod(const char *iStr, char *oStr);
	UINT GPSetProperty(char *iStr);
	virtual ~GPWebBrowser2();

	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x8856f961, 0x340a, 0x11d0, { 0xa9, 0x6b, 0x0, 0xc0, 0x4f, 0xd7, 0x5, 0xa2 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,LPCTSTR lpszWindowName, DWORD dwStyle,const RECT& rect,
						CWnd* pParentWnd, UINT nID,	CCreateContext* pContext = NULL)
	{
		BOOL ret=CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
		if (ret) ConnectSink();
		return ret;
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,  const RECT& rect, CWnd* pParentWnd, UINT nID,
				CFile* pPersist = NULL, BOOL bStorage = FALSE,  BSTR bstrLicKey = NULL)
	{
		BOOL ret=CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,	pPersist, bStorage, bstrLicKey);
		if (ret) ConnectSink();
		return ret;
	}

// Attributes
public:

// Operations
public:
	void OnGPKillFocus(CWnd* pNewWnd);
	void OnGPRButtonDown(UINT nFlags, CPoint point);
	void WBGoBack();
	void WBGoForward();
	void WBGoHome();
	void WBGoSearch();
	void WBNavigate(LPCTSTR URL, VARIANT* Flags, VARIANT* TargetFrameName, VARIANT* PostData, VARIANT* Headers);
	void WBRefresh();
	void WBRefresh2(VARIANT* Level);
	void WBStop();
	LPDISPATCH WBGetApplication();
	LPDISPATCH WBGetParent();
	LPDISPATCH WBGetContainer();
	LPDISPATCH WBGetDocument();
	BOOL WBGetTopLevelContainer();
	CString WBGetType();
	long WBGetLeft();
	void WBSetLeft(long nNewValue);
	long WBGetTop();
	void WBSetTop(long nNewValue);
	long WBGetWidth();
	void WBSetWidth(long nNewValue);
	long WBGetHeight();
	void WBSetHeight(long nNewValue);
	CString WBGetLocationName();
	CString WBGetLocationURL();
	BOOL WBGetBusy();
	void WBQuit();
	void WBClientToWindow(long* pcx, long* pcy);
	void WBPutProperty(LPCTSTR Property_, const VARIANT& vtValue);
	VARIANT WBGetProperty_(LPCTSTR Property_);
	CString WBGetName();
	long WBGetHwnd();
	CString WBGetFullName();
	CString WBGetPath();
	BOOL WBGetVisible();
	void WBSetVisible(BOOL bNewValue);
	BOOL WBGetStatusBar();
	void WBSetStatusBar(BOOL bNewValue);
	CString WBGetStatusText();
	void WBSetStatusText(LPCTSTR lpszNewValue);
	long WBGetToolBar();
	void WBSetToolBar(long nNewValue);
	BOOL WBGetMenuBar();
	void WBSetMenuBar(BOOL bNewValue);
	BOOL WBGetFullScreen();
	void WBSetFullScreen(BOOL bNewValue);
	void WBNavigate2(VARIANT* URL, VARIANT* Flags, VARIANT* TargetFrameName, VARIANT* PostData, VARIANT* Headers);
	long WBQueryStatusWB(long cmdID);
	void WBExecWB(long cmdID, long cmdexecopt, VARIANT* pvaIn, VARIANT* pvaOut);
	void WBShowBrowserBar(VARIANT* pvaClsid, VARIANT* pvarShow, VARIANT* pvarSize);
	long WBGetReadyState();
	BOOL WBGetOffline();
	void WBSetOffline(BOOL bNewValue);
	BOOL WBGetSilent();
	void WBSetSilent(BOOL bNewValue);
	BOOL WBGetRegisterAsBrowser();
	void WBSetRegisterAsBrowser(BOOL bNewValue);
	BOOL WBGetRegisterAsDropTarget();
	void WBSetRegisterAsDropTarget(BOOL bNewValue);
	BOOL WBGetTheaterMode();
	void WBSetTheaterMode(BOOL bNewValue);
	BOOL WBGetAddressBar();
	void WBSetAddressBar(BOOL bNewValue);
	BOOL WBGetResizable();
	void WBSetResizable(BOOL bNewValue);

	/// Fired Events
	void OnStatusTextChangeExplorer(LPCTSTR Text);
	void OnProgressChangeExplorer(long Progress, long ProgressMax);
	void OnCommandStateChangeExplorer(long Command, BOOL Enable);
	void OnDownloadBeginExplorer();
	void OnDownloadCompleteExplorer();
	void OnTitleChangeExplorer(LPCTSTR Text);
	void OnPropertyChangeExplorer(LPCTSTR szProperty);
	void OnBeforeNavigate2Explorer(LPDISPATCH pDisp, VARIANT FAR* URL, VARIANT FAR* Flags, VARIANT FAR* TargetFrameName, VARIANT FAR* PostData, VARIANT FAR* Headers, BOOL FAR* Cancel);
	void OnNewWindow2Explorer(LPDISPATCH FAR* ppDisp, BOOL FAR* Cancel);
	void OnNavigateComplete2Explorer(LPDISPATCH pDisp, VARIANT FAR* URL);
	void OnDocumentCompleteExplorer(LPDISPATCH pDisp, VARIANT FAR* URL);
	void OnOnQuitExplorer();
	void OnOnVisibleExplorer(BOOL Visible);
	void OnOnToolBarExplorer(BOOL ToolBar);
	void OnOnMenuBarExplorer(BOOL MenuBar);
	void OnOnStatusBarExplorer(BOOL StatusBar);
	void OnOnFullScreenExplorer(BOOL FullScreen);
	void OnOnTheaterModeExplorer(BOOL TheaterMode);
	void OnWindowSetResizableExplorer(BOOL Resizable);
	void OnWindowSetLeftExplorer(long Left);
	void OnWindowSetTopExplorer(long Top);
	void OnWindowSetWidthExplorer(long Width);
	void OnWindowSetHeightExplorer(long Height);
	void OnWindowClosingExplorer(BOOL IsChildWindow, BOOL FAR* Cancel);
	void OnSetSecureLockIconExplorer(long SecureLockIcon);
	void OnClientToHostWindowExplorer(long FAR* CX, long FAR* CY);
	void OnFileDownloadExplorer(BOOL FAR* Cancel);
	void OnNavigateErrorExplorer(LPDISPATCH pDisp, VARIANT FAR* URL, VARIANT FAR* Frame, VARIANT FAR* StatusCode, BOOL FAR* Cancel);
	void OnPrintTemplateInstantiationExplorer(LPDISPATCH pDisp);
	void OnPrintTemplateTeardownExplorer(LPDISPATCH pDisp);
	void OnUpdatePageStatusExplorer(LPDISPATCH pDisp, VARIANT FAR* nPage, VARIANT FAR* fDone);
	void OnPrivacyImpactedStateChangeExplorer(BOOL bImpacted);

public:
	DWORD m_JustDoIt;
	int AddChar(char iChar, DWORD iFlags);
// Overrides
	// ClassWizard generated virtual function overrides
	//{{AFX_VIRTUAL(GPWebBrowser2)
	public:
	virtual BOOL PreTranslateMessage(MSG* pMsg);
	protected:
	virtual LRESULT WindowProc(UINT message, WPARAM wParam, LPARAM lParam);
	//}}AFX_VIRTUAL


protected:
	void OnDragLButtonUp(PGPDRAGDROPSTRUCT pDrDrStruct, LPPOINT point);
	void OnMouseDragMove(PGPDRAGDROPSTRUCT pDrDrStruct, LPPOINT point);
	void OnDragMouseHover();

	//{{AFX_MSG(GPWebBrowser2)
	afx_msg void OnSizing(UINT fwSide, LPRECT pRect);
	afx_msg LRESULT OnNcHitTest(CPoint point);
	afx_msg void OnKillFocus(CWnd* pNewWnd);
	afx_msg void OnSetFocus(CWnd* pOldWnd);
	afx_msg void OnSize(UINT nType, int cx, int cy);
	afx_msg void OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);
	afx_msg void OnVScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);
	afx_msg HBRUSH OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor);
	//}}AFX_MSG
	DECLARE_MESSAGE_MAP()

	void GPOnSizing(UINT fwSide, LPRECT pRect);
private:
	void ConnectSink();
	BOOL MayBeChangeEdit;
	GPUnit **referGPU;
	UINT UnitId;
	GPWebBrowser2Sink *m_Sink;
	DWORD m_dwCookie;
	IConnectionPoint* pCP;
	GPHTMLDocument *m_Document;
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_WEBBROWSER2_H__AC7F046C_6A37_4DD2_92DD_338917C60F19__INCLUDED_)
